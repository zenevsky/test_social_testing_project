name: Python Autotests

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose tests set
        required: true
        type: choice
        default: All
        options:
          - All
          - UI
          - API

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

jobs:
  download-history:
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download artifacts
        run: |
          echo "Fetching allure-results artifact..."
          RESPONSE=$(curl -s -L -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            "https://api.github.com/repos/zenevsky/test_social_testing_project/actions/artifacts?name=allure-results")

          echo "Allure response: $RESPONSE"

          ARTIFACT_ID=$(echo "$RESPONSE" | python -c "import sys, json; data=json.load(sys.stdin); a=data.get('artifacts', []); print(a[0]['id'] if a else '')")

          if [ -z "$ARTIFACT_ID" ]; then
            echo "No allure-results artifact found, skipping download."
          else
            echo "Found allure-results artifact with ID: $ARTIFACT_ID"
            curl -L -H "Accept: application/vnd.github+json" \
                 -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
                 "https://api.github.com/repos/zenevsky/test_social_testing_project/actions/artifacts/$ARTIFACT_ID/zip" \
                 -o artifacts.zip
          fi

          echo "Fetching github-pages artifact..."
          RESPONSE=$(curl -s -L -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            "https://api.github.com/repos/zenevsky/test_social_testing_project/actions/artifacts?name=github-pages")

          echo "Pages response: $RESPONSE"

          REPORT_ID=$(echo "$RESPONSE" | python -c "import sys, json; data=json.load(sys.stdin); a=data.get('artifacts', []); print(a[0]['id'] if a else '')")

          if [ -z "$REPORT_ID" ]; then
            echo "No github-pages artifact found, skipping download."
          else
            echo "Found github-pages artifact with ID: $REPORT_ID"
            curl -L -H "Accept: application/vnd.github+json" \
                 -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
                 "https://api.github.com/repos/zenevsky/test_social_testing_project/actions/artifacts/$REPORT_ID/zip" \
                 -o pages.zip
          fi

      - name: Prepare allure history
        run: |
          mkdir allure-results
          if [ -f artifacts.zip ]; then
            echo "Unzipping allure-results..."
            unzip artifacts.zip -d allure-results
          fi
          
          mkdir old_pages pages_history
          if [ -f pages.zip ]; then
            echo "Unzipping github-pages..."
            unzip pages.zip -d old_pages
            tar -xvf old_pages/artifact.tar -C pages_history
            if [ -d pages_history/history ]; then
              echo "Restoring allure history..."
              cp pages_history/history/* allure-results || true
              cp -r pages_history/history allure-results || true
            else
              echo "No previous history found in pages artifact."
            fi
          else
            echo "No pages.zip found, skipping history restore."
          fi

      - name: Store allure history
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          retention-days: 10
          
  run-tests:
    runs-on: ubuntu-latest
    name: Run autotests
    needs: download-history
    steps:
      - name: Checkout autotests
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install Playwright browsers
        if: github.event.inputs.deployment_target != 'API'
        run: playwright install --with-deps

      - name: Run all tests
        if: "github.event.inputs.deployment_target == 'All'"
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: pytest --alluredir=allure-results
        continue-on-error: true

      - name: Run API tests
        if: "github.event.inputs.deployment_target == 'API'"
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: pytest -m api --alluredir=allure-results
        continue-on-error: true

      - name: Run UI tests
        if: "github.event.inputs.deployment_target == 'UI'"
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: pytest -m ui --alluredir=allure-results
        continue-on-error: true

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: microsoft
          java-version: "21"

      - name: Install Allure
        run: |
          sudo wget https://github.com/allure-framework/allure2/releases/download/2.34.0/allure-2.34.0.tgz
          sudo tar -zxvf allure-2.34.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.34.0/bin/allure /usr/bin/allure

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4

      - name: Generate report
        run: allure generate -c allure-results -o _site

      - name: Save allure report
        uses: actions/upload-artifact@v4
        with:
          name: _site
          path: _site
          retention-days: 1

  publish-report:
    name: Report publication
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
